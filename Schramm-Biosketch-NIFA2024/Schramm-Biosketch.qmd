---
title: Biographical Sketch
format:
  quarto-cv-pdf: default
author: Michael Schramm
date: last-modified
phone: 910-232-3760
address: 1001 Holleman Dr. E. | 2118 TAMU | College Station, TX 77840-2118
email: michael.schramm@ag.tamu.edu
fontsize: 12pt
#github: mps9506
orcid: 0000-0003-1876-6592
fontawesome: yes
nocite: '@*'
bibliography: 
 peer: bibs/schramm-pr.yaml
 other: bibs/schramm-tr.yaml
 data: bibs/schramm-data.yaml
csl: https://raw.githubusercontent.com/mps9506/quarto-cv/main/apa-cv.csl
validate-yaml: false
---
```{r setup, echo=FALSE, message=FALSE, warning=FALSE}
## probably need to make a package for this stuff
library(googlesheets4)
library(stringr)
library(lubridate)
library(tidyr)
library(dplyr)
library(rlang)
library(dplR)

create_CV_object <-  function(data_location,
                              source_location = "github.com/mps9506",
                              sheet_is_publicly_readable = TRUE) {

  cv <- list(
    links = c()
  )


  if(sheet_is_publicly_readable){
    # This tells google sheets to not try and authenticate. Note that this will only
    # work if your sheet has sharing set to "anyone with link can view"
    googlesheets4::gs4_deauth()
  } else {
    # My info is in a public sheet so there's no need to do authentication but if you want
    # to use a private sheet, then this is the way you need to do it.
    # designate project-specific cache so we can render Rmd without problems
    options(gargle_oauth_cache = ".secrets")
  }

  read_gsheet <- function(sheet_id){
    googlesheets4::read_sheet(data_location, sheet = sheet_id, skip = 1, col_types = "c")
  }
  cv$entries_data  <- read_gsheet(sheet_id = "entries")
  cv$skills        <- read_gsheet(sheet_id = "language_skills")
  cv$text_blocks   <- read_gsheet(sheet_id = "text_blocks")
  cv$contact_info  <- read_gsheet(sheet_id = "contact_info")
  cv$skills_block  <- read_gsheet(sheet_id = "skills_block")



  extract_year <- function(dates){
    date_year <- stringr::str_extract(dates, "(20|19)[0-9]{2}")
    date_year[is.na(date_year)] <- lubridate::year(lubridate::ymd(Sys.Date())) + 10

    date_year
  }

  parse_dates <- function(dates){

    date_month <- stringr::str_extract(dates, "(\\w+|\\d+)(?=(\\s|\\/|-)(20|19)[0-9]{2})")
    date_month[is.na(date_month)] <- "1"

    paste("1", date_month, extract_year(dates), sep = "-") %>%
      lubridate::dmy()
  }

  # Clean up entries dataframe to format we need it for printing
  cv$entries_data %<>%
    tidyr::unite(
      tidyr::starts_with('description'),
      col = "description_bullets",
      sep = " \\item ",
      na.rm = TRUE
    ) %>%
    dplyr::mutate(
      description_bullets = ifelse(.data$description_bullets != "", paste0(" \\item ", .data$description_bullets), ""),
      start = ifelse(.data$start == "NULL", NA, .data$start),
      end = ifelse(.data$end == "NULL", NA, .data$end),
      start_year = extract_year(.data$start),
      end_year = extract_year(.data$end),
      no_start = is.na(.data$start),
      has_start = !.data$no_start,
      no_end = is.na(.data$end),
      has_end = !.data$no_end,
      timeline = dplyr::case_when(
        no_start  & no_end  ~ "N/A",
        no_start  & has_end ~ as.character(.data$end),
        has_start & no_end  ~ paste(.data$start, "-", "Current"),
        TRUE                ~ paste(.data$start, "-", .data$end)
      )
    ) %>%
    dplyr::arrange(dplyr::desc(parse_dates(.data$end))) %>%
    dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))

  cv
}

print_section <- function(cv,
                          section_id,
                          glue_template = "default",
                          latexify = FALSE){


  if(glue_template == "default"){
    glue_template <- "
{timeline} \\hfill {institution} \\newline {title} \\hfill {loc} \\newline \\begin{{itemize}} {description_bullets} \\end{{itemize}}
"
  }

  section_data <- dplyr::filter(cv$entries_data, .data$section == section_id)

  if(latexify == TRUE) {
    section_data <- section_data %>%
      dplyr::mutate(
        institution = latexify(.data$institution, doublebackslash = FALSE),
        title = latexify(.data$title, doublebackslash = FALSE)
        )
  }

  # Take entire entries data frame and removes the links in descending order
  # so links for the same position are right next to each other in number.
  for(i in 1:nrow(section_data)){
    for(col in c('title', 'description_bullets')){
      strip_res <- list(cv = cv, text = section_data[i, col])
      section_data[i, col] <- strip_res$text
      cv <- strip_res$cv
    }
  }

  return(glue::glue_data(section_data, glue_template))
}

print_text_block <- function(cv, label){
  text_block <- dplyr::filter(cv$text_blocks, .data$loc == label) %>%
    dplyr::pull(.data$text)

  #strip_res <- sanitize_links(cv, text_block)
  strip_res <- list(cv = cv, text = text_block)

  cat(strip_res$text)

  invisible(strip_res$cv)
}

print_skills_block <- function(cv) {
  glue_template <- "
\\keywordsentry{{{id}}}{{{text}}}"

  print(glue::glue_data(cv$skills_block, glue_template))
  invisible(cv)
}

cv_data <- create_CV_object(data_location="https://docs.google.com/spreadsheets/d/1oeMexIuFWJIJa-xofMLqSvPtg49VceJqM2y3YDqcW-4/edit?usp=sharing")

```


# Research Experience


\textsc{Texas A\&M AgriLife Research \hfill May 2016 - current}\newline
*Texas Water Resources Institute*

*    Research Specialist IV (Sept. 2023 - current); Research Specialist III (Aug. 2019 - Aug. 2023); Research Associate (May 2016 - Aug. 2019)

     Lead and collaborate on watershed management and water quality assessment projects. Develop internal and external facing open-source tools for watershed planning, data analysis, and data sharing. Provide data science and statistical support for senior PIs and graduate students.

\textsc{Oak Ridge National Labratory/}\newline 
\textsc{Oak Ridge Associated Universities \hfill Feb. 2014 - Feb. 2106}\newline
*Environmental Sciences Division* 

*    Research Associate (Feb. 2014 - Feb. 2106)

     Collaborated on projects focused on improving the understanding of environmental impacts and mitigation of hydropower technologies. Work included database development, statistical analysis, experiments, and publication. 

\textsc{University of Delaware \hfill Sept. 2012 - June 2013}\newline
*Center for Energy and Environmental Policy*

*    Graduate Research Assistant (Sept. 2012 - June 2013)

     Provided research, data analysis, and conducted interviews for environmental policy analysis reports commissioned by the Delaware General Assembly. Policy analysis work focused on green infrastructure promotion and revitalization of brownfield sites.

# Synergistic Activities

Ongoing Watershed Protection Planning and Total Maximum Daily Load development with state agencies (TCEQ, TSSWCB) that lead to stakeholder engagement, workshops, and implementation of best management practices to reduce nonpoint source pollutant loading to waterbodies.

# Education

```{r education}
#| echo: false
#| output: asis

cv_data |> 
  print_section('education', 
                glue_template = "
                {timeline} \\hfill {institution} \\newline {title} \\hfill {loc} \\newline \\newline
                ")
```


# Research Area

```{r research}
#| echo: false
#| output: asis

cv_data |> 
  print_text_block('research')
```


# Grants Received


```{r projects}
#| echo: false
#| output: asis

cv_data$entries_data <- cv_data$entries_data |> filter(section == "grant_project") |> arrange(desc(start)) |> filter(title %in% c("Assessment of PFAS concentrations and loadings in the Lavaca Bay watershed. Role: PI", "Sandy Creek Watershed Monitoring and Characterization. Role: PI", "Regional Agricultural BMP Planning Database. Role: PI", "Texas Coastal Nutrient Input Repository; Role: PI"))

cv_data |> 
  print_section('grant_project',
                glue_template = "
                {timeline} *{institution}*: {title}. Amount: {loc}. \\newline \\newline
                ")
```


# Refereed Publications (prior 4-years)

::: {#refs-peer}
:::



